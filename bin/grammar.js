/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"csso":3,"decl":4,"EOF":5,"declClass":6,"declImport":7,"IMPORT":8,"STRING":9,"SEMI_COLON":10,"CLASS":11,"CAP_ID":12,"declClassWithExtends":13,"L_CURLY_BRACKET":14,"declClassBody":15,"R_CURLY_BRACKET":16,"EXTENDS":17,"declConstant":18,"declFunction":19,"AT":20,"MIN_ID":21,"DOUBLE_DOT":22,"constantValue":23,"L_PAR":24,"calculExpr":25,"R_PAR":26,"calculValue":27,"MINUS":28,"specialValue":29,"typeColor":30,"typeString":31,"typeUrl":32,"typeCalc":33,"declFunctionIsStatic":34,"declFunctionName":35,"declFunctionArgument":36,"declFunctionWithChild":37,"declFunctionBody":38,"STATIC":39,"FUNCTION":40,"declFunctionMultiArgument":41,"COMMA":42,"declChild":43,"ARROW":44,"declFunctionChildValue":45,"classCall":46,"staticCall":47,"functionCall":48,"callSuper":49,"declProperty":50,"SUPER":51,"declPropertyValueList":52,"declPropertyValue":53,"NEW":54,"DOT":55,"SHARP":56,"HEXA":57,"typePercent":58,"NUMBER":59,"PERCENT":60,"typePixel":61,"PIXEL":62,"typePoint":63,"POINTS":64,"typeSecond":65,"SECOND":66,"typeEm":67,"EM":68,"typeCentimeter":69,"CENTIMETER":70,"typeMillimeter":71,"MILLIMETER":72,"typeInch":73,"INCH":74,"typeEx":75,"EX":76,"typePica":77,"PICA":78,"URL":79,"CALC":80,"value":81,"PLUS":82,"MULT":83,"DIV":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"IMPORT",9:"STRING",10:"SEMI_COLON",11:"CLASS",12:"CAP_ID",14:"L_CURLY_BRACKET",16:"R_CURLY_BRACKET",17:"EXTENDS",20:"AT",21:"MIN_ID",22:"DOUBLE_DOT",24:"L_PAR",26:"R_PAR",28:"MINUS",39:"STATIC",40:"FUNCTION",42:"COMMA",44:"ARROW",51:"SUPER",54:"NEW",55:"DOT",56:"SHARP",57:"HEXA",59:"NUMBER",60:"PERCENT",62:"PIXEL",64:"POINTS",66:"SECOND",68:"EM",70:"CENTIMETER",72:"MILLIMETER",74:"INCH",76:"EX",78:"PICA",79:"URL",80:"CALC",82:"PLUS",83:"MULT",84:"DIV"},
productions_: [0,[3,2],[4,2],[4,2],[4,0],[7,3],[6,6],[13,2],[13,0],[15,2],[15,2],[15,0],[18,5],[23,3],[23,1],[23,2],[23,1],[29,1],[29,1],[29,1],[29,1],[19,9],[35,1],[35,1],[34,2],[34,1],[36,3],[36,0],[41,4],[41,0],[37,2],[37,0],[43,5],[43,0],[45,1],[45,1],[45,1],[38,2],[38,2],[38,0],[49,5],[50,4],[52,2],[52,0],[53,1],[53,1],[46,5],[47,6],[48,4],[30,2],[58,2],[61,2],[63,2],[65,2],[67,2],[31,1],[69,2],[71,2],[73,2],[75,2],[77,2],[32,4],[33,4],[81,1],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,1],[25,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new NNode.NRoot($$[$0-1]) 
break;
case 2: this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 3: this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 4: this.$ = [] 
break;
case 5: this.$ = new NNode.NImport($$[$0-1]) 
break;
case 6: this.$ = new NNode.NClass($$[$0-4], $$[$0-3], $$[$0-1]) 
break;
case 7: this.$ = $$[$0] 
break;
case 8: this.$ = undefined 
break;
case 9: this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 10: this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 11: this.$ = [] 
break;
case 12: this.$ = new NNode.NConstant($$[$0-3], $$[$0-1]) 
break;
case 13: this.$ = $$[$0-1] 
break;
case 15: this.$ = new NNode.NMathMult(new NNode.NNumber(-1, NNode.Unit.None), $$[$0]) 
break;
case 21: this.$ = new NNode.NFunction($$[$0-7].name, $$[$0-7].ctor, $$[$0-5], $$[$0-3], $$[$0-1], $$[$0-8]) 
break;
case 22: this.$ = { name: $$[$0], ctor: false } 
break;
case 23: this.$ = { name: $$[$0], ctor: true } 
break;
case 24: this.$ = true 
break;
case 25: this.$ = false 
break;
case 26: this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 27: this.$ = [] 
break;
case 28: this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 29: this.$ = [] 
break;
case 30: this.$ = $$[$0] 
break;
case 31: this.$ = [] 
break;
case 32: this.$ = [new NNode.NChild($$[$0-4], $$[$0-2])].concat($$[$0]) 
break;
case 33: this.$ = [] 
break;
case 34: this.$ = $$[$0] 
break;
case 35: this.$ = $$[$0] 
break;
case 36: this.$ = $$[$0] 
break;
case 37: this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 38: this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 39: this.$ = [] 
break;
case 40: this.$ = new NNode.NSuper($$[$0-2]) 
break;
case 41: this.$ = new NNode.NProperty($$[$0-3], $$[$0-1]) 
break;
case 42: this.$ = [$$[$0-1]].concat($$[$0]) 
break;
case 43: this.$ = [] 
break;
case 44: this.$ = $$[$0]
break;
case 45: this.$ = new NNode.NValue($$[$0]) 
break;
case 46: this.$ = new NNode.NClassCall($$[$0-3], $$[$0-1]) 
break;
case 47: this.$ = new NNode.NStaticCall($$[$0-5], $$[$0-3], $$[$0-1]) 
break;
case 48: this.$ = new NNode.NFunctionCall($$[$0-3], $$[$0-1]) 
break;
case 49: this.$ = new NNode.NColor($$[$0]) 
break;
case 50: this.$ = new NNode.NPercent($$[$0-1]) 
break;
case 51: this.$ = new NNode.NPixel($$[$0-1]) 
break;
case 52: this.$ = new NNode.NPoint($$[$0-1]) 
break;
case 53: this.$ = new NNode.NSecond($$[$0-1]) 
break;
case 54: this.$ = new NNode.NEm($$[$0-1]) 
break;
case 55: this.$ = new NNode.NString($$[$0]) 
break;
case 56: this.$ = new NNode.NCentimeter($$[$0-1]) 
break;
case 57: this.$ = new NNode.NMillimeter($$[$0-1]) 
break;
case 58: this.$ = new NNode.NInch($$[$0-1]) 
break;
case 59: this.$ = new NNode.NEx($$[$0-1]) 
break;
case 60: this.$ = new NNode.NPica($$[$0-1]) 
break;
case 61: this.$ = new NNode.NUrl($$[$0-1]) 
break;
case 62: this.$ = new NNode.NCalc($$[$0-1]) 
break;
case 63: this.$ = new NNode.NNumber($$[$0], NNode.Unit.None) 
break;
case 64: this.$ = new NNode.NMathPlus($$[$0-2], $$[$0]) 
break;
case 65: this.$ = new NNode.NMathMinus($$[$0-2], $$[$0]) 
break;
case 66: this.$ = new NNode.NMathMult($$[$0-2], $$[$0]) 
break;
case 67: this.$ = new NNode.NMathDiv($$[$0-2], $$[$0]) 
break;
case 68: this.$ = new NNode.NMathMult(new NNode.NNumber(-1, NNode.Unit.None), $$[$0]) 
break;
case 69: this.$ = $$[$0-1] 
break;
case 70: this.$ = $$[$0] 
break;
case 71: this.$ = new NNode.NConstantCall($$[$0]) 
break;
}
},
table: [{3:1,4:2,5:[2,4],6:3,7:4,8:[1,6],11:[1,5]},{1:[3]},{5:[1,7]},{4:8,5:[2,4],6:3,7:4,8:[1,6],11:[1,5]},{4:9,5:[2,4],6:3,7:4,8:[1,6],11:[1,5]},{12:[1,10]},{9:[1,11]},{1:[2,1]},{5:[2,2]},{5:[2,3]},{13:12,14:[2,8],17:[1,13]},{10:[1,14]},{14:[1,15]},{12:[1,16]},{5:[2,5],8:[2,5],11:[2,5]},{15:17,16:[2,11],18:18,19:19,20:[1,20],34:21,39:[1,22],40:[1,23]},{14:[2,7]},{16:[1,24]},{15:25,16:[2,11],18:18,19:19,20:[1,20],34:21,39:[1,22],40:[1,23]},{15:26,16:[2,11],18:18,19:19,20:[1,20],34:21,39:[1,22],40:[1,23]},{21:[1,27]},{12:[1,30],21:[1,29],35:28},{40:[1,31]},{12:[2,25],21:[2,25]},{5:[2,6],8:[2,6],11:[2,6]},{16:[2,9]},{16:[2,10]},{22:[1,32]},{24:[1,33]},{24:[2,22]},{24:[2,23]},{12:[2,24],21:[2,24]},{9:[1,56],23:34,24:[1,35],27:36,28:[1,37],29:38,30:50,31:51,32:52,33:53,56:[1,55],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,79:[1,57],80:[1,58],81:49},{20:[1,60],26:[2,27],36:59},{10:[1,61]},{20:[1,66],24:[1,64],25:62,27:65,28:[1,63],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,81:49},{9:[2,14],10:[2,14],21:[2,14],24:[2,14],28:[2,14],56:[2,14],59:[2,14],79:[2,14],80:[2,14]},{27:67,58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,81:49},{9:[2,16],10:[2,16],21:[2,16],24:[2,16],28:[2,16],56:[2,16],59:[2,16],79:[2,16],80:[2,16]},{9:[2,72],10:[2,72],21:[2,72],24:[2,72],26:[2,72],28:[2,72],56:[2,72],59:[2,72],79:[2,72],80:[2,72],82:[2,72],83:[2,72],84:[2,72]},{9:[2,73],10:[2,73],21:[2,73],24:[2,73],26:[2,73],28:[2,73],56:[2,73],59:[2,73],79:[2,73],80:[2,73],82:[2,73],83:[2,73],84:[2,73]},{9:[2,74],10:[2,74],21:[2,74],24:[2,74],26:[2,74],28:[2,74],56:[2,74],59:[2,74],79:[2,74],80:[2,74],82:[2,74],83:[2,74],84:[2,74]},{9:[2,75],10:[2,75],21:[2,75],24:[2,75],26:[2,75],28:[2,75],56:[2,75],59:[2,75],79:[2,75],80:[2,75],82:[2,75],83:[2,75],84:[2,75]},{9:[2,76],10:[2,76],21:[2,76],24:[2,76],26:[2,76],28:[2,76],56:[2,76],59:[2,76],79:[2,76],80:[2,76],82:[2,76],83:[2,76],84:[2,76]},{9:[2,77],10:[2,77],21:[2,77],24:[2,77],26:[2,77],28:[2,77],56:[2,77],59:[2,77],79:[2,77],80:[2,77],82:[2,77],83:[2,77],84:[2,77]},{9:[2,78],10:[2,78],21:[2,78],24:[2,78],26:[2,78],28:[2,78],56:[2,78],59:[2,78],79:[2,78],80:[2,78],82:[2,78],83:[2,78],84:[2,78]},{9:[2,79],10:[2,79],21:[2,79],24:[2,79],26:[2,79],28:[2,79],56:[2,79],59:[2,79],79:[2,79],80:[2,79],82:[2,79],83:[2,79],84:[2,79]},{9:[2,80],10:[2,80],21:[2,80],24:[2,80],26:[2,80],28:[2,80],56:[2,80],59:[2,80],79:[2,80],80:[2,80],82:[2,80],83:[2,80],84:[2,80]},{9:[2,81],10:[2,81],21:[2,81],24:[2,81],26:[2,81],28:[2,81],56:[2,81],59:[2,81],79:[2,81],80:[2,81],82:[2,81],83:[2,81],84:[2,81]},{9:[2,82],10:[2,82],21:[2,82],24:[2,82],26:[2,82],28:[2,82],56:[2,82],59:[2,82],79:[2,82],80:[2,82],82:[2,82],83:[2,82],84:[2,82]},{9:[2,17],10:[2,17],21:[2,17],24:[2,17],28:[2,17],56:[2,17],59:[2,17],79:[2,17],80:[2,17]},{9:[2,18],10:[2,18],21:[2,18],24:[2,18],28:[2,18],56:[2,18],59:[2,18],79:[2,18],80:[2,18]},{9:[2,19],10:[2,19],21:[2,19],24:[2,19],28:[2,19],56:[2,19],59:[2,19],79:[2,19],80:[2,19]},{9:[2,20],10:[2,20],21:[2,20],24:[2,20],28:[2,20],56:[2,20],59:[2,20],79:[2,20],80:[2,20]},{9:[2,63],10:[2,63],21:[2,63],24:[2,63],26:[2,63],28:[2,63],56:[2,63],59:[2,63],60:[1,71],62:[1,68],64:[1,69],66:[1,70],68:[1,72],70:[1,74],72:[1,73],74:[1,75],76:[1,77],78:[1,76],79:[2,63],80:[2,63],82:[2,63],83:[2,63],84:[2,63]},{57:[1,78]},{9:[2,55],10:[2,55],21:[2,55],24:[2,55],28:[2,55],56:[2,55],59:[2,55],79:[2,55],80:[2,55]},{24:[1,79]},{24:[1,80]},{26:[1,81]},{21:[1,82]},{16:[2,12],20:[2,12],39:[2,12],40:[2,12]},{26:[1,83],28:[1,85],82:[1,84],83:[1,86],84:[1,87]},{20:[1,66],24:[1,64],25:88,27:65,28:[1,63],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,81:49},{20:[1,66],24:[1,64],25:89,27:65,28:[1,63],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,81:49},{26:[2,70],28:[2,70],82:[2,70],83:[2,70],84:[2,70]},{21:[1,90]},{9:[2,15],10:[2,15],21:[2,15],24:[2,15],28:[2,15],56:[2,15],59:[2,15],79:[2,15],80:[2,15]},{9:[2,51],10:[2,51],21:[2,51],24:[2,51],26:[2,51],28:[2,51],56:[2,51],59:[2,51],79:[2,51],80:[2,51],82:[2,51],83:[2,51],84:[2,51]},{9:[2,52],10:[2,52],21:[2,52],24:[2,52],26:[2,52],28:[2,52],56:[2,52],59:[2,52],79:[2,52],80:[2,52],82:[2,52],83:[2,52],84:[2,52]},{9:[2,53],10:[2,53],21:[2,53],24:[2,53],26:[2,53],28:[2,53],56:[2,53],59:[2,53],79:[2,53],80:[2,53],82:[2,53],83:[2,53],84:[2,53]},{9:[2,50],10:[2,50],21:[2,50],24:[2,50],26:[2,50],28:[2,50],56:[2,50],59:[2,50],79:[2,50],80:[2,50],82:[2,50],83:[2,50],84:[2,50]},{9:[2,54],10:[2,54],21:[2,54],24:[2,54],26:[2,54],28:[2,54],56:[2,54],59:[2,54],79:[2,54],80:[2,54],82:[2,54],83:[2,54],84:[2,54]},{9:[2,57],10:[2,57],21:[2,57],24:[2,57],26:[2,57],28:[2,57],56:[2,57],59:[2,57],79:[2,57],80:[2,57],82:[2,57],83:[2,57],84:[2,57]},{9:[2,56],10:[2,56],21:[2,56],24:[2,56],26:[2,56],28:[2,56],56:[2,56],59:[2,56],79:[2,56],80:[2,56],82:[2,56],83:[2,56],84:[2,56]},{9:[2,58],10:[2,58],21:[2,58],24:[2,58],26:[2,58],28:[2,58],56:[2,58],59:[2,58],79:[2,58],80:[2,58],82:[2,58],83:[2,58],84:[2,58]},{9:[2,60],10:[2,60],21:[2,60],24:[2,60],26:[2,60],28:[2,60],56:[2,60],59:[2,60],79:[2,60],80:[2,60],82:[2,60],83:[2,60],84:[2,60]},{9:[2,59],10:[2,59],21:[2,59],24:[2,59],26:[2,59],28:[2,59],56:[2,59],59:[2,59],79:[2,59],80:[2,59],82:[2,59],83:[2,59],84:[2,59]},{9:[2,49],10:[2,49],21:[2,49],24:[2,49],28:[2,49],56:[2,49],59:[2,49],79:[2,49],80:[2,49]},{9:[1,91]},{20:[1,66],24:[1,64],25:92,27:65,28:[1,63],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,81:49},{14:[2,31],22:[1,94],37:93},{26:[2,29],41:95,42:[1,96]},{9:[2,13],10:[2,13],21:[2,13],24:[2,13],28:[2,13],56:[2,13],59:[2,13],79:[2,13],80:[2,13]},{20:[1,66],24:[1,64],25:97,27:65,28:[1,63],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,81:49},{20:[1,66],24:[1,64],25:98,27:65,28:[1,63],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,81:49},{20:[1,66],24:[1,64],25:99,27:65,28:[1,63],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,81:49},{20:[1,66],24:[1,64],25:100,27:65,28:[1,63],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,81:49},{26:[2,68],28:[2,68],82:[2,68],83:[2,68],84:[2,68]},{26:[1,101],28:[1,85],82:[1,84],83:[1,86],84:[1,87]},{26:[2,71],28:[2,71],82:[2,71],83:[2,71],84:[2,71]},{26:[1,102]},{26:[1,103],28:[1,85],82:[1,84],83:[1,86],84:[1,87]},{14:[1,104]},{9:[1,106],14:[2,33],43:105},{26:[2,26]},{20:[1,107]},{26:[2,64],28:[2,64],82:[2,64],83:[1,86],84:[1,87]},{26:[2,65],28:[2,65],82:[2,65],83:[1,86],84:[1,87]},{26:[2,66],28:[2,66],82:[2,66],83:[2,66],84:[2,66]},{26:[2,67],28:[2,67],82:[2,67],83:[2,67],84:[2,67]},{26:[2,69],28:[2,69],82:[2,69],83:[2,69],84:[2,69]},{9:[2,61],10:[2,61],21:[2,61],24:[2,61],28:[2,61],56:[2,61],59:[2,61],79:[2,61],80:[2,61]},{9:[2,62],10:[2,62],21:[2,62],24:[2,62],28:[2,62],56:[2,62],59:[2,62],79:[2,62],80:[2,62]},{16:[2,39],21:[1,112],38:108,49:109,50:110,51:[1,111]},{14:[2,30]},{44:[1,113]},{21:[1,114]},{16:[1,115]},{16:[2,39],21:[1,112],38:116,49:109,50:110,51:[1,111]},{16:[2,39],21:[1,112],38:117,49:109,50:110,51:[1,111]},{24:[1,118]},{22:[1,119]},{12:[1,125],21:[1,126],45:120,46:121,47:122,48:123,54:[1,124]},{26:[2,29],41:127,42:[1,96]},{16:[2,21],20:[2,21],39:[2,21],40:[2,21]},{16:[2,37]},{16:[2,38]},{20:[1,60],26:[2,27],36:128},{9:[1,56],10:[2,43],21:[1,132],23:131,24:[1,35],27:36,28:[1,37],29:38,30:50,31:51,32:52,33:53,52:129,53:130,56:[1,55],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,79:[1,57],80:[1,58],81:49},{10:[1,133]},{10:[2,34]},{10:[2,35]},{10:[2,36]},{12:[1,134]},{55:[1,135]},{24:[1,136]},{26:[2,28]},{26:[1,137]},{10:[1,138]},{9:[1,56],10:[2,43],21:[1,132],23:131,24:[1,35],27:36,28:[1,37],29:38,30:50,31:51,32:52,33:53,52:139,53:130,56:[1,55],58:42,59:[1,54],61:39,63:40,65:41,67:43,69:45,71:44,73:46,75:48,77:47,79:[1,57],80:[1,58],81:49},{9:[2,44],10:[2,44],21:[2,44],24:[2,44],28:[2,44],56:[2,44],59:[2,44],79:[2,44],80:[2,44]},{9:[2,45],10:[2,45],21:[2,45],24:[2,45],28:[2,45],56:[2,45],59:[2,45],79:[2,45],80:[2,45]},{9:[1,106],14:[2,33],43:140},{24:[1,141]},{21:[1,142]},{20:[1,60],26:[2,27],36:143},{10:[1,144]},{16:[2,41],21:[2,41],51:[2,41]},{10:[2,42]},{14:[2,32]},{20:[1,60],26:[2,27],36:145},{24:[1,146]},{26:[1,147]},{16:[2,40],21:[2,40],51:[2,40]},{26:[1,148]},{20:[1,60],26:[2,27],36:149},{10:[2,48]},{10:[2,46]},{26:[1,150]},{10:[2,47]}],
defaultActions: {7:[2,1],8:[2,2],9:[2,3],16:[2,7],25:[2,9],26:[2,10],29:[2,22],30:[2,23],95:[2,26],105:[2,30],116:[2,37],117:[2,38],121:[2,34],122:[2,35],123:[2,36],127:[2,28],139:[2,42],140:[2,32],147:[2,48],148:[2,46],150:[2,47]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var NNode = require('./nodes.js')
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip spacer */
break;
case 1:/* skip comments */
break;
case 2:return 5;
break;
case 3:return 8;
break;
case 4:return 11;
break;
case 5:return 17;
break;
case 6:return 40;
break;
case 7:return 39;
break;
case 8:return 51;
break;
case 9:return 54;
break;
case 10:return 80;
break;
case 11:return 79;
break;
case 12:return 62;
break;
case 13:return 74;
break;
case 14:return 70;
break;
case 15:return 72;
break;
case 16:return 76;
break;
case 17:return 78;
break;
case 18:return 68;
break;
case 19:return 60;
break;
case 20:return 64;
break;
case 21:return 66;
break;
case 22:return 14;
break;
case 23:return 16;
break;
case 24:return 24;
break;
case 25:return 26;
break;
case 26:return 22;
break;
case 27:return 44;
break;
case 28:return 10;
break;
case 29:return 55;
break;
case 30:return 42;
break;
case 31:return 28;
break;
case 32:return 82;
break;
case 33:return 83;
break;
case 34:return 84;
break;
case 35:return 20;
break;
case 36:return 56;
break;
case 37:return 9;
break;
case 38:return 57;
break;
case 39:return 59;
break;
case 40:return 12;
break;
case 41:return 21;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*\n)/,/^(?:$)/,/^(?:Import\b)/,/^(?:Class\b)/,/^(?:Extends\b)/,/^(?:Function\b)/,/^(?:Static\b)/,/^(?:Super\b)/,/^(?:New\b)/,/^(?:calc\b)/,/^(?:url\b)/,/^(?:px\b)/,/^(?:in\b)/,/^(?:cm\b)/,/^(?:mm\b)/,/^(?:ex\b)/,/^(?:pc\b)/,/^(?:em\b)/,/^(?:%)/,/^(?:pt\b)/,/^(?:s\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:->)/,/^(?:;)/,/^(?:\.)/,/^(?:,)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:@)/,/^(?:#)/,/^(?:".+")/,/^(?:[A-Fa-f0-9]{6})/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:[A-Z][A-Za-z0-9]*)/,/^(?:[a-z][A-Za-z0-9]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}